{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContacts","onShowClick","e","onClickDelete","a","delete","name","email","phone","className","onClick","style","cursor","float","color","to","marginRight","Contacts","key","TextInputGroup","label","placeholder","onChange","error","Fragment","htmlFor","classnames","defaultProps","AddContact","errors","target","onSubmit","preventDefault","newContact","post","history","push","bind","Header","contactManager","href","textDecoration","EditContact","updContact","match","params","put","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.21acdf2c.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport axios from 'axios'\nconst Context = React.createContext();\n\nconst reducer = (state, action) => {\n    switch(action.type){\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map(\n                    contact => contact.id === action.payload.id?(contact = action.payload): contact\n                    )\n            }\n        default:\n            return state\n    }\n}\nexport class Provider extends Component{\n\n    state = {\n        contacts: [],\n        dispatch: action => this.setState(state => reducer(state, action))\n    };\n\n    async componentDidMount() {\n        const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\");\n        this.setState({contacts: res.data})\n    }\n\n    render(){\n       return(\n           <Context.Provider value={this.state}>\n           {this.props.children}\n           </Context.Provider>\n       ) \n    }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {Consumer} from '../../context'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom'\nclass Contact extends Component {\n    state = {\n        showContacts: false,\n    }\n   onShowClick = (e) =>{\n    this.setState({showContacts: !this.state.showContacts})\n   }\n    onClickDelete = async (id, dispatch) => {\n        try {\n           await axios.delete(\n             `https://jsonplaceholder.typicode.com/users/${id}`\n           );\n           dispatch({ type: \"DELETE_CONTACT\", payload: id });\n        } catch (e) {\n             dispatch({ type: \"DELETE_CONTACT\", payload: id });\n      }\n       \n        //   this.props.deleteClickHandler()\n    };\n    render() {\n        const {id, name, email, phone} = this.props.contact;\n        const {showContacts}= this.state;\n\n        return (\n            <Consumer>\n                {value => {\n                    const{dispatch} =value\n                    return (\n                      <div className=\"card card-body mb-3\">\n                        <h4>\n                          {name}{\" \"}\n                          <i\n                            onClick={() => this.onShowClick()}\n                            className=\"fas fa-sort-down\"\n                            style={{ cursor: \"pointer\" }}\n                          ></i>\n                          <i\n                            onClick={() => this.onClickDelete(id, dispatch)}\n                            className=\"fas fa-times\"\n                            style={{\n                              cursor: \"pointer\",\n                              float: \"right\",\n                              color: \"red\",\n                            }}\n                          ></i>\n                          <Link to={`contact/edit/${id}`}>\n                            <i\n                              className=\"fas fa-pencil-alt\"\n                              style={{\n                                cursor: \"pointer\",\n                                float: \"right\",\n                                marginRight: \"1rem\",\n                                color: \"black\",\n                              }}\n                            ></i>\n                          </Link>\n                        </h4>\n                        {showContacts ? (\n                          <ul className=\"list-group\">\n                            <li className=\"list-group-item\">Email: {email}</li>\n                            <li className=\"list-group-item\">Phone: {phone}</li>\n                          </ul>\n                        ) : null}\n                      </div>\n                    ); \n                }}\n            </Consumer>\n\n\n            \n        )\n    }\n}\nContact.propTypes ={\n    contact: PropTypes.object.isRequired,\n    \n}\nexport default Contact;","import React, { Component } from 'react'\nimport Contact from './Contact';\nimport {Consumer} from '../../context'\nclass Contacts extends Component {\n   \n        \n        // deleteContact = (id) => {\n        //     const{contacts} = this.state;\n        //     const newContacts = contacts.filter(contact => contact.id !== id);\n\n        //     this.setState({\n        //         contacts: newContacts\n        //     });\n        // };\n    \n    render() {\n        return(\n            <Consumer>\n                {value => {\n                    const {contacts} = value;\n                    return(\n                        <>\n                        <h1 className=\"display-4\">\n                        <span className=\"text-danger\">Contact</span> List\n                        </h1>\n                        {contacts.map(contact => ( \n                            <Contact \n                            key={contact.id}\n                            contact={contact}\n                            />\n                        ))}\n                    </>\n                    )\n                }}\n            </Consumer>\n        )\n\n    }\n}\nexport default Contacts","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n const TextInputGroup = ({\n     label,\n     name,\n     value,\n     placeholder,\n     type,\n     onChange, \n     error\n }) => {\n    return (\n        <React.Fragment>\n        <div className=\"form-group\">\n        <label htmlFor={name}>{label}</label>\n        <input \n        type={type}\n        name={name}\n        className={classnames(\"form-control form-control-lg\", {\n            'is-invalid': error\n        })}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}/>\n        {error && <div className=\"invalid-feedback\">{error}</div> }\n       \n       </div>\n        </React.Fragment>\n    )\n}\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n    \n\n}\nTextInputGroup.defaultProps ={\n    type: 'text'\n}\nexport default TextInputGroup;","import axios from 'axios';\nimport React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\nclass AddContact extends Component { \n    state ={\n        name: '',\n        email: '',\n        phone: '',\n        errors: {}\n    }\n    \n    onChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        const {name, email, phone} = this.state;\n         // Error notification\n         if(name === ''){\n            return this.setState({errors:{name: 'Name is required'}});\n          \n        };\n        if(email === ''){\n            return  this.setState({errors:{email: 'Email is required'}});\n            \n        };\n        if(phone === ''){\n            return this.setState({errors:{phone: 'Phone is required'}}); \n        }\n        \n        const newContact = {\n            \n            name,\n            email,\n            phone\n        }\n        const res = await axios.post(\"https://jsonplaceholder.typicode.com/users\",\n            newContact)\n             dispatch({type: 'ADD_CONTACT', payload: res.data});\n        \n\n        // Clear State\n        this.setState({\n            name: '',\n            email: '',\n            phone: '',\n            errors: {}\n        });\n        // This use for redirecting the user to the home page\n        this.props.history.push('/')\n    };\n    render() {\n        const{name, email, phone, errors} = this.state;\n        \n        return(\n            <Consumer>\n            {value => {\n                const {dispatch} = value;\n                return(\n                    <div className=\"card mb-3\">\n                <div className=\"card-header\">Add Contact</div>\n                    <div className=\"card-body\">\n                        <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                            <TextInputGroup\n                            label = 'Name'\n                            name = 'name'\n                            placeholder='Enter Name...'\n                            value ={name}\n                            onChange ={this.onChange}\n                            error = {errors.name}\n                            />\n                            <TextInputGroup\n                            label ='Email'\n                            name ='email'\n                            type =\"email\"\n                            placeholder='Enter email...'\n                            value ={email}\n                            onChange ={this.onChange}\n                            error ={errors.email}\n                            />\n                            <TextInputGroup\n                            label ='Phone'\n                            name ='phone'\n                            placeholder='Enter Phone...'\n                            value ={phone}\n                            onChange ={this.onChange}\n                            error = {errors.phone}\n                            />\n                            <input \n                            type=\"submit\" \n                            value=\"Add Contact\"\n                            className=\"btn btn-light btn-block\"/>\n                        </form>\n                    </div>\n            </div>\n                )\n            }}\n            </Consumer>\n        )\n        \n    }\n}\nexport default AddContact","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nconst Header = (props) => {\n  const { contactManager } = props;\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n      <div className=\"container\">\n        <a href=\"/\" className=\"navbar-brand\">\n          {contactManager}\n        </a>\n        <div>\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link\n                to=\"/\"\n                className=\"nav-item\"\n                style={{ color: \"white\", textDecoration: \"none\" }}\n              >\n                <i className=\"fas fa-home\">Home</i>\n              </Link>\n            </li>\n            <li className=\"nav-item ml-3\">\n              <Link\n                to=\"/contact/add\"\n                className=\"nav-item\"\n                style={{ color: \"white\", textDecoration: \"none\" }}\n              >\n                <i className=\"fas fa-plus\">Add</i>\n              </Link>\n            </li>\n            <li className=\"nav-item ml-3\">\n              <Link\n                to=\"/about\"\n                className=\"nav-item\"\n                style={{ color: \"white\", textDecoration: \"none\" }}\n              >\n                <i className=\"fas fa-question\">About</i>\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </nav>\n  );\n};\nHeader.defaultProps = {\n  contactManager: \"My App\",\n};\nHeader.propTypes = {\n  contactManager: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react'\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">Simple app to manage contacts</p>\n            <p className=\"text-secondary\">Version 1.0.0</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">\n                <span className=\"text-danger\">404</span>\n                Page Not Found\n            </h1> \n            <p className=\"lead\">Sorry this page does not exist</p>\n        </div>\n    )\n}\n","import axios from \"axios\";\nimport React, { Component } from \"react\";\nimport { Consumer } from \"../../context\";\nimport TextInputGroup from \"../layout/TextInputGroup\";\nclass EditContact extends Component {\n  state = {\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    errors: {},\n  };\n\n    async componentDidMount() {\n        const { id } = this.props.match.params;\n        const res = await axios.get(\n          `https://jsonplaceholder.typicode.com/users/${id}`\n        );\n        const contact = res.data;\n        this.setState({\n            name: contact.name,\n            email: contact.email,\n            phone: contact.phone\n        })\n    }\n  onChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  onSubmit = async (dispatch, e) => {\n    e.preventDefault();\n    const { name, email, phone } = this.state;\n    // Error notification\n    if (name === \"\") {\n      return this.setState({ errors: { name: \"Name is required\" } });\n    }\n    if (email === \"\") {\n      return this.setState({ errors: { email: \"Email is required\" } });\n    }\n    if (phone === \"\") {\n      return this.setState({ errors: { phone: \"Phone is required\" } });\n    }\n\n      const updContact = {\n          name,\n          email,\n          phone\n      }\n      const { id } = this.props.match.params;\n      const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\n      dispatch({type:'UPDATE_CONTACT', payload: res.data})\n   \n\n    // Clear State\n    this.setState({\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      errors: {},\n    });\n    // This use for redirecting the user to the home page\n    this.props.history.push(\"/\");\n  };\n  render() {\n    const { name, email, phone, errors } = this.state;\n\n    return (\n      <Consumer>\n        {(value) => {\n          const { dispatch } = value;\n          return (\n            <div className=\"card mb-3\">\n              <div className=\"card-header\">Edit Contact</div>\n              <div className=\"card-body\">\n                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                  <TextInputGroup\n                    label=\"Name\"\n                    name=\"name\"\n                    placeholder=\"Enter Name...\"\n                    value={name}\n                    onChange={this.onChange}\n                    error={errors.name}\n                  />\n                  <TextInputGroup\n                    label=\"Email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter email...\"\n                    value={email}\n                    onChange={this.onChange}\n                    error={errors.email}\n                  />\n                  <TextInputGroup\n                    label=\"Phone\"\n                    name=\"phone\"\n                    placeholder=\"Enter Phone...\"\n                    value={phone}\n                    onChange={this.onChange}\n                    error={errors.phone}\n                  />\n                  <input\n                    type=\"submit\"\n                    value=\"Update Contact\"\n                    className=\"btn btn-light btn-block\"\n                  />\n                </form>\n              </div>\n            </div>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\nexport default EditContact;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport{HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport './App.css';\nimport Contacts from './components/contacts/Contacts';\nimport AddContact from './components/contacts/AddContact';\nimport Header from './components/layout/Header';\nimport {Provider} from './context'\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport EditContact from './components/contacts/EditContact';\n\nfunction App() {\n  \n  return (\n    <Provider>\n      <Router>\n        <div className=\"App\">\n          <Header contactManager='Contact Manager' />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path='/' component={Contacts} />\n              <Route exact path='/contact/add' component={AddContact} />\n              <Route exact path='/contact/edit/:id' component={EditContact} />\n              <Route exact path='/about' component={About} />\n              <Route  component={NotFound} />\n            </Switch> \n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}